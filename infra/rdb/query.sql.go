// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package rdb

import (
	"context"
)

const createTask = `-- name: CreateTask :execrows
INSERT INTO tasks ( id, title, text, user_id, priority_id, created_at, updated_at )
VALUES ( ?, ?, ?, ?, ?, NOW(), NOW() )
`

type CreateTaskParams struct {
	ID         string
	Title      string
	Text       string
	UserID     string
	PriorityID string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.Title,
		arg.Text,
		arg.UserID,
		arg.PriorityID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createUser = `-- name: CreateUser :execrows
INSERT INTO users ( id, name, created_at, updated_at )
VALUES ( ?, ?, NOW(), NOW() )
`

type CreateUserParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getTask = `-- name: GetTask :one
SELECT id, title, text, user_id, priority_id, created_at, updated_at FROM tasks WHERE id = ? LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Text,
		&i.UserID,
		&i.PriorityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskPriority = `-- name: GetTaskPriority :one
SELECT id, value, created_at, updated_at FROM task_priorities WHERE value = ? LIMIT 1
`

func (q *Queries) GetTaskPriority(ctx context.Context, value string) (TaskPriority, error) {
	row := q.db.QueryRowContext(ctx, getTaskPriority, value)
	var i TaskPriority
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, created_at, updated_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchTasks = `-- name: SearchTasks :many
SELECT id, title, text, user_id, priority_id, created_at, updated_at FROM tasks
WHERE (? = '' OR id = ?)
	AND (? = '' OR title = ?)
	AND (? = '' OR text = ?)
	AND (? = '' OR user_id = ?)
	AND (? = '' OR priority_id = ?)
ORDER BY updated_at DESC
`

type SearchTasksParams struct {
	ID         string
	Title      string
	Text       string
	UserID     string
	PriorityID string
}

func (q *Queries) SearchTasks(ctx context.Context, arg SearchTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, searchTasks,
		arg.ID,
		arg.ID,
		arg.Title,
		arg.Title,
		arg.Text,
		arg.Text,
		arg.UserID,
		arg.UserID,
		arg.PriorityID,
		arg.PriorityID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Text,
			&i.UserID,
			&i.PriorityID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, name, created_at, updated_at FROM users
`

func (q *Queries) SearchUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
